#!/usr/bin/env python3
"""
Utility for retrieving and listing Kubernetes pods running on a specified node.
"""

import json
import subprocess
import sys


def check_dependency(command):
    """Check if a command-line dependency exists."""
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def run_command(command):
    """Run a shell command."""
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            print(f"Command failed with error: {stderr}")
            return None
        return stdout.strip()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_pods_on_node(node_name):
    """Get all pods running on a given node."""
    command = [
        "kubectl", "get", "pods",
        "--all-namespaces",
        "-o", "json"
    ]
    
    output = run_command(command)
    if not output:
        return []
    
    try:
        pods_data = json.loads(output)
        pods = []
        for pod in pods_data["items"]:
            if pod["spec"].get("nodeName") == node_name:
                namespace = pod["metadata"]["namespace"]
                name = pod["metadata"]["name"]
                status = pod["status"]["phase"]
                pods.append(f"{namespace}/{name} ({status})")
        return pods
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error processing pod data: {e}")
        return []


def main():
    """Main function."""
    check_dependency("kubectl")
    
    try:
        node_name = input("Enter node name: ")
        if not node_name:
            print("Node name cannot be empty")
            sys.exit(1)
        
        print(f"\nFetching pods on node {node_name}...")
        pods = get_pods_on_node(node_name)
        
        if not pods:
            print(f"No pods found on node {node_name}")
            sys.exit(0)
        
        print("\nPods found:")
        for pod in sorted(pods):
            print(f"- {pod}")
            
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


if __name__ == "__main__":
    main() 